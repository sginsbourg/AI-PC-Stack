<script type="text/javascript">
        var gk_isXlsx = false;
        var gk_xlsxFileLookup = {};
        var gk_fileData = {};
        function filledCell(cell) {
          return cell !== '' && cell != null;
        }
        function loadFileData(filename) {
        if (gk_isXlsx && gk_xlsxFileLookup[filename]) {
            try {
                var workbook = XLSX.read(gk_fileData[filename], { type: 'base64' });
                var firstSheetName = workbook.SheetNames[0];
                var worksheet = workbook.Sheets[firstSheetName];

                // Convert sheet to JSON to filter blank rows
                var jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, blankrows: false, defval: '' });
                // Filter out blank rows (rows where all cells are empty, null, or undefined)
                var filteredData = jsonData.filter(row => row.some(filledCell));

                // Heuristic to find the header row by ignoring rows with fewer filled cells than the next row
                var headerRowIndex = filteredData.findIndex((row, index) =>
                  row.filter(filledCell).length >= filteredData[index + 1]?.filter(filledCell).length
                );
                // Fallback
                if (headerRowIndex === -1 || headerRowIndex > 25) {
                  headerRowIndex = 0;
                }

                // Convert filtered JSON back to CSV
                var csv = XLSX.utils.aoa_to_sheet(filteredData.slice(headerRowIndex)); // Create a new sheet from filtered array of arrays
                csv = XLSX.utils.sheet_to_csv(csv, { header: 1 });
                return csv;
            } catch (e) {
                console.error(e);
                return "";
            }
        }
        return gk_fileData[filename] || "";
        }
        </script><!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Podcast Generator</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .container { max-width: 800px; margin: auto; }
        .status { color: green; }
        .error { color: red; }
        textarea { width: 100%; height: 200px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Podcast Generator</h1>
        <p>Ollama Port: <%= ollamaPort %></p>
        <form id="uploadForm" enctype="multipart/form-data">
            <label>Upload PDF:</label>
            <input type="file" name="pdf" accept=".pdf" required>
            <button type="submit">Upload</button>
        </form>
        <div id="status"></div>
        <textarea id="script" placeholder="Generated script will appear here"></textarea>
        <button id="generateAudio">Generate Audio</button>
        <button id="downloadAudio" disabled>Download Audio</button>
        <form id="uploadPodcastForm">
            <label>Title:</label><input type="text" name="title">
            <label>Description:</label><textarea name="description"></textarea>
            <label>Buzzsprout Token:</label><input type="text" name="buzzToken">
            <label>Buzzsprout Podcast ID:</label><input type="text" name="buzzPodcastId">
            <label>Libsyn API Key:</label><input type="text" name="libsynApiKey">
            <button type="submit">Upload Podcast</button>
        </form>
    </div>
    <script>
        document.getElementById('uploadForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const status = document.getElementById('status');
            try {
                const res = await fetch('/upload-pdf', { method: 'POST', body: formData });
                const data = await res.json();
                status.innerText = data.success ? 'PDF processed!' : data.message;
                status.className = data.success ? 'status' : 'error';
                if (data.success) {
                    const scriptRes = await fetch('/generate-script', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ research: data.research, welcomeText: 'Welcome to the podcast!', endingText: 'Thanks for listening!' })
                    });
                    const scriptData = await scriptRes.json();
                    document.getElementById('script').value = scriptData.script;
                }
            } catch (err) {
                status.innerText = 'Error: ' + err.message;
                status.className = 'error';
            }
        });

        document.getElementById('generateAudio').addEventListener('click', async () => {
            const script = document.getElementById('script').value;
            const status = document.getElementById('status');
            try {
                const res = await fetch('/generate-audio', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ script })
                });
                const data = await res.json();
                status.innerText = data.success ? 'Audio generated!' : data.message;
                status.className = data.success ? 'status' : 'error';
                if (data.success) {
                    const downloadBtn = document.getElementById('downloadAudio');
                    downloadBtn.disabled = false;
                    downloadBtn.onclick = () => window.location.href = `/download/${data.audioFile.split('/').pop()}`;
                }
            } catch (err) {
                status.innerText = 'Error: ' + err.message;
                status.className = 'error';
            }
        });

        document.getElementById('uploadPodcastForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const formData = new FormData(e.target);
            const data = Object.fromEntries(formData);
            const audioFile = document.getElementById('downloadAudio').href?.split('/').pop();
            const status = document.getElementById('status');
            try {
                const res = await fetch('/upload-podcast', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ audioFile, ...data })
                });
                const result = await res.json();
                status.innerText = result.success ? 'Podcast uploaded!' : result.message;
                status.className = result.success ? 'status' : 'error';
            } catch (err) {
                status.innerText = 'Error: ' + err.message;
                status.className = 'error';
            }
        });
    </script>
</body>
</html>